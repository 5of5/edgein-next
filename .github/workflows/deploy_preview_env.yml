name: Deploy to preview environment
on:
  pull_request:
    branches:
      - stage
    types:
      - opened
      - synchronize
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Workspace to deploy'
        required: true
        default: preview

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{vars.AWS_REGION}}
  PROJECT_NAME: edgein

jobs:
  init:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Load environment variables from .env file
        uses: falti/dotenv-action@v1.0.4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Config Terraform plugin cache
        working-directory: infra/terraform/application
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
          mkdir --parents ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup TF variables
        working-directory: infra/terraform/application
        run: |
          touch input.tfvars
          echo 'vercel_commit = "${{ GITHUB_SHA::8 }}"' >> input.tfvars
          echo 'vercel_team = ${{ secrets.VERCEL_TEAM }}' >> input.tfvars
          echo 'vercel_api_token = ${{ secrets.VERCEL_API_TOKEN }}' >> input.tfvars

      - name: Terraform Init
        id: init
        working-directory: infra/terraform/application
        run: terraform init

      - name: Set workspace
        run: |
          if [[ "${{ github.event.inputs.workspace }}" == "preview" ]]; then
            echo WORKSPACE=pr-${{ github.event.pull_request.number }} >> $GITHUB_ENV
          else
            echo WORKSPACE=${{ github.event.inputs.workspace }} >> $GITHUB_ENV
          fi

      - name: Terraform Validate
        id: validate
        working-directory: infra/terraform/application
        run: terraform validate -no-color

      - name: Terraform select workspace
        id: select-workspace
        working-directory: infra/terraform/application
        run: terraform workspace select -or-create ${{ env.WORKSPACE }}
        
      - name: Create preview environment
        working-directory: infra/terraform/application
        run: terraform apply --auto-approve -var-file="input.tfvars"

      - name: Fetch Terraform hasura admin secret path output
        id: tf-hasura-admin-output
        run: |
          output=$(terraform output -raw hasura_admin_secrete_ssm_path)
          echo "TF_OUT_HASURA_ADMIN_SECRET_SSM_PATH=$output" >> $GITHUB_ENV

      - name: Fetch Terraform hasura endpoint output
        id: tf-hasura-endpoint-output
        run: |
          output=$(terraform output -raw hasura_endpoint)
          echo "TF_OUT_HASURA_ENDPOINT=$output" >> $GITHUB_ENV

      - name: Fetch Hasura admin secrete
        id: hasura-admin-secret
        run: |
          value=$(aws ssm get-parameter --name ${{ env.TF_OUT_HASURA_ADMIN_SECRET_SSM_PATH }} --with-decryption --query 'Parameter.Value' --output text)
          echo "HASURA_ADMIN_SECRET=$value" >> $GITHUB_ENV

      - name: Hasura migrate
        uses: tibotiber/hasura-action@v3.0
        with:
          args: migrate apply --database-name default
        env:
          HASURA_WORKDIR: ./infra/hasura
          HASURA_ENGINE_VERSION: v2.29.1
          HASURA_ENDPOINT: ${{ env.TF_OUT_HASURA_ENDPOINT }}
          HASURA_ADMIN_SECRET: ${{ env.HASURA_ADMIN_SECRET }}

      - name: Hasura clear
        uses: tibotiber/hasura-action@v3.0
        with:
          args: metadata clear
        env:
          HASURA_WORKDIR: ./infra/hasura
          HASURA_ENGINE_VERSION: v2.29.1
          HASURA_ENDPOINT: ${{ env.TF_OUT_HASURA_ENDPOINT }}
          HASURA_ADMIN_SECRET: ${{ env.HASURA_ADMIN_SECRET }}

      - name: Hasura apply
        uses: tibotiber/hasura-action@v3.0
        with:
          args: metadata apply
        env:
          HASURA_WORKDIR: ./infra/hasura
          HASURA_ENGINE_VERSION: v2.29.1
          HASURA_ENDPOINT: ${{ env.TF_OUT_HASURA_ENDPOINT }}
          HASURA_ADMIN_SECRET: ${{ env.HASURA_ADMIN_SECRET }}

      - name: Update data fields
        working-directory: ./scripts
        run: npx ts-node update_data_fields.ts